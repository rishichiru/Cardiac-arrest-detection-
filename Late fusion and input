# ------------------------------- Late Fusion Method -------------------------------
# Function to make predictions using both clinical and ECG models
def late_fusion_predict(clinical_data, ecg_image):
    # Make prediction for clinical data using RandomForest
    clinical_pred = rf.predict(clinical_data)

    # Make prediction for ECG image using SVM
    image_flatten = ecg_image.reshape(1, -1)  # Flatten ECG image
    ecg_pred = svm_model.predict(image_flatten)

    # Combine the predictions using weighted average
    # Weight for clinical data: 30% and for ECG image: 70%
    weighted_avg = (0.3 * clinical_pred[0]) + (0.7 * ecg_pred[0])

    # Convert the weighted average to a final prediction (round to nearest integer)
    final_pred = np.round(weighted_avg)

    # Convert the prediction to a final label
    if final_pred > 0.5:
        result = "The patient is likely to have heart disease."
    else:
        result = "The patient is unlikely to have heart disease."

    print(f"Late Fusion Prediction: {result}")
    return result


1# ------------------------------- Manual Input for Prediction -------------------------------
# Function to allow manual input and make a prediction
def manual_input_predict():
    print("Please enter the following details:")
    age = float(input("Age: "))
    sex = int(input("Sex (1: Male, 0: Female): "))
    cp = int(input("Chest Pain Type (1: Typical Angina, 2: Atypical Angina, 3: Non-Anginal Pain, 4: Asymptomatic): "))
    trestbps = float(input("Resting Blood Pressure: "))
    chol = float(input("Serum Cholesterol (mg/dl): "))
    fbs = int(input("Fasting Blood Sugar > 120 mg/dl (1: Yes, 0: No): "))
    restecg = int(input("Resting Electrocardiographic Results (0, 1, 2): "))
    thalach = float(input("Maximum Heart Rate Achieved: "))
    exang = int(input("Exercise-Induced Angina (1: Yes, 0: No): "))
    oldpeak = float(input("ST Depression Induced by Exercise Relative to Rest: "))
    slope = int(input("Slope of the Peak Exercise ST Segment (1, 2, 3): "))
    ca = int(input("Number of Major Vessels Colored by Fluoroscopy (0-3): "))
    thal = int(input("Thal (3: Normal, 6: Fixed Defect, 7: Reversible Defect): "))

    # Create a DataFrame for the input
    input_data = pd.DataFrame({
        'age': [age],
        'sex': [sex],
        'cp': [cp],
        'trestbps': [trestbps],
        'chol': [chol],
        'fbs': [fbs],
        'restecg': [restecg],
        'thalach': [thalach],
        'exang': [exang],
        'oldpeak': [oldpeak],
        'slope': [slope],
        'ca': [ca],
        'thal': [thal]
    })

    # Allow the user to upload ECG image
    uploaded = files.upload()  # Upload the ECG image

    # Read and preprocess ECG image
    new_ecg_image_path = list(uploaded.keys())[0]  # Get the uploaded image file
    image = cv2.imread(new_ecg_image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (224, 224))  # Resize to 224x224
    image = image.astype('float32') / 255.0  # Normalize

    # Make a prediction using Late Fusion method
    result = late_fusion_predict(input_data, image)

# Call the manual input function
manual_input_predict()          #54,1,0,120,188,0,1,113,0,1.4,1,1,3-normal
                                 #50,0,0,110,254,0,0,159,0,0,2,0,2 - abnormal
